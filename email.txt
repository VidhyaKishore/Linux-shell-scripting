👩‍🏫 Introduction
Hello everyone!
In this session, I’m going to walk you through everything you need to get started with Git in our environment.

We’ll cover:

Installing Git.

Configuring your username and email.

Handling SSL verification issues.

Setting up a proxy in corporate networks.

Creating a Personal Access Token, or PAT.

And finally, cloning a repository from Azure DevOps.

💻 Step 1 – Install Git

As of now, Git is not available in the MYIT portal to request directly.

Instead, you can go to the Confluence page link shared here, navigate to the Pre-requisites section, and download Git by clicking on the link provided.

Once installed, confirm Git is working by opening your terminal or Git Bash and typing:

git --version


If you see the version number, Git has been installed successfully.

📝 Step 2 – Configure Username and Email

These settings are very important because Git uses them to record who makes changes in a project. Without them, your commits won’t have proper ownership.

👉 Open your Git Bash and type:

git config --global user.name "Your Name"
git config --global user.email "your-email@example.com"


Now, verify the settings with:

git config --list


You should see your username and email in the output.

By default, we used the --global option.
This means your name and email are applied to all repositories on your system.

If you want different credentials for a specific project only, remove --global and run the same commands inside that project folder.

🔒 Step 3 – SSL Verification in Git

By default, Git always verifies the SSL certificate of the remote server when you run commands like clone, fetch, or push.

This ensures you’re connecting to a secure server.

However, in training or lab environments, valid SSL certificates may not always be available.
In such cases, Git may throw SSL errors and prevent you from cloning or pushing code.

Instead of typing this every time:

git -c http.sslVerify=false clone <repo-url>


We can configure it once globally:

git config --global http.sslVerify false


To confirm:

git config --list --show-origin


⚠️ Important: Disabling SSL verification is not recommended in production, since it exposes you to security risks.
But in a controlled training setup, this is acceptable as a quick workaround.

🌐 Step 4 – Proxy Setup in Corporate Networks

Sometimes, when connected to a VPN or inside a corporate network, Git commands may fail because all traffic goes through a proxy server.

To make Git work properly, configure the proxy:

git config --global http.proxy http://proxy.company.com:8080
git config --global https.proxy http://proxy.company.com:8080


If authentication is required:

git config --global http.proxy http://username:password@proxy.company.com:8080
git config --global https.proxy http://username:password@proxy.company.com:8080


Verify with:

git config --list


And if you later don’t need the proxy:

git config --global --unset http.proxy
git config --global --unset https.proxy

🔑 Step 5 – Personal Access Token (PAT)

When we work with Git over HTTPS, we often need authentication.
Most platforms like GitHub, Azure DevOps, and GitLab no longer allow passwords — instead, they require a Personal Access Token (PAT).

A PAT acts like a password but is more secure because it can be scoped and time-limited.

👉 To create a PAT:

Log in to your Git platform (e.g., Azure DevOps or GitHub).

Go to User Settings → Personal Access Tokens.

Click New Token.

Give it a name, set an expiration date, and select the required scopes.

Create and copy the token. Remember, you’ll only see it once.

⚠️ Treat your PAT like a password:

Never share it.

Never commit it to code.

Revoke it immediately if exposed.

📥 Step 6 – Clone a Repository with PAT

Now let’s put it all together.

When you run:

git clone https://dev.azure.com/organization/project/_git/repository


Git will ask for your username and password.
Enter your username as usual, but for the password, paste your Personal Access Token.

Your repository will now be cloned successfully.

✅ Summary
So in this session, we:

Installed Git.

Configured username and email.

Learned how to handle SSL verification issues.

Set up proxy for corporate networks.

Created a Personal Access Token.

And finally, cloned a repository from Azure DevOps using PAT.

With these steps, you’re now ready to work with Git in almost any environment — whether it’s your personal setup, a corporate network, or a training lab.

🎬 Thank you for watching, and happy coding!
