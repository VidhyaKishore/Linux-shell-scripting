package.json

{
  "name": "vault-postgres-app",
  "version": "1.0.0",
  "main": "app.js",
  "dependencies": {
    "axios": "^1.6.0",
    "pg": "^8.10.0"
  }
}


app.js

const axios = require('axios');
const { Client } = require('pg');

// Vault & Postgres config
const VAULT_ADDR = 'http://vault:8200';
const VAULT_TOKEN = 'myroot';  // Replace with real token
const SECRET_PATH = 'database/data/postgres';
const POSTGRES_HOST = 'postgres-db';
const POSTGRES_DB = 'mydb';

// Step 1: Get secret from Vault
axios.get(`${VAULT_ADDR}/v1/${SECRET_PATH}`, {
  headers: { 'X-Vault-Token': VAULT_TOKEN }
})
.then(response => {
  const { username, password } = response.data.data.data;

  // Step 2: Connect to Postgres using credentials
  const client = new Client({
    user: username,
    password: password,
    host: POSTGRES_HOST,
    database: POSTGRES_DB,
    port: 5432,
  });

  client.connect()
    .then(() => {
      console.log('✅ Connected to Postgres using Vault credentials');
      return client.end();
    })
    .catch(err => {
      console.error('❌ DB connection error:', err.message);
    });

})
.catch(err => {
  console.error('❌ Vault fetch error:', err.message);
});

Dockerfile

FROM node:20

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY app.js .

CMD [ "node", "app.js" ]


alternative:

// vault-get.js
const VAULT_ADDR = 'http://hcv:8200'; // Replace with your container Vault address
const SECRET_PATH = '/v1/secret/data/myapp'; // Replace with your actual path
const VAULT_TOKEN = 'hvs.xxxxx'; // Replace with your actual Vault token

async function fetchSecret() {
  try {
    const response = await fetch(`${VAULT_ADDR}${SECRET_PATH}`, {
      method: 'GET',
      headers: {
        'X-Vault-Token': VAULT_TOKEN
      }
    });

    if (!response.ok) {
      throw new Error(`Vault fetch error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log('Secret data:', data);
  } catch (err) {
    console.error(err.message);
  }
}

fetchSecret();
----------------------------------------------------------------------
// app.js
import fetch from 'node-fetch';
import pg from 'pg';

const VAULT_ADDR = 'http://hcv:8200'; // Use the container name of Vault
const VAULT_TOKEN = process.env.VAULT_TOKEN; // Pass via environment variable
const VAULT_SECRET_PATH = '/v1/secret/data/database/postgres';

async function fetchDbCredentials() {
  const res = await fetch(`${VAULT_ADDR}${VAULT_SECRET_PATH}`, {
    headers: {
      'X-Vault-Token': VAULT_TOKEN
    }
  });

  if (!res.ok) {
    throw new Error(`Vault fetch failed: ${res.status}`);
  }

  const secret = await res.json();
  return secret.data.data;
}

async function connectToPostgres({ username, password }) {
  const client = new pg.Client({
    user: username,
    password: password,
    host: 'postgres',  // container name of your PostgreSQL instance
    database: 'postgres',
    port: 5432
  });

  await client.connect();
  const result = await client.query('SELECT NOW()');
  console.log('PostgreSQL time:', result.rows[0]);
  await client.end();
}

(async () => {
  try {
    const creds = await fetchDbCredentials();
    await connectToPostgres(creds);
  } catch (err) {
    console.error('Error:', err.message);
  }
})();

# package.json

{
  "name": "vault-postgres-app",
  "version": "1.0.0",
  "type": "module",
  "main": "app.js",
  "dependencies": {
    "pg": "^8.11.3",
    "node-fetch": "^3.3.2"
  }
}

# Dockerfile
FROM node:20

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY app.js ./

CMD ["node", "app.js"]
