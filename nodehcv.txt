package.json

{
  "name": "vault-postgres-app",
  "version": "1.0.0",
  "main": "app.js",
  "dependencies": {
    "axios": "^1.6.0",
    "pg": "^8.10.0"
  }
}


app.js

const axios = require('axios');
const { Client } = require('pg');

// Vault & Postgres config
const VAULT_ADDR = 'http://vault:8200';
const VAULT_TOKEN = 'myroot';  // Replace with real token
const SECRET_PATH = 'database/data/postgres';
const POSTGRES_HOST = 'postgres-db';
const POSTGRES_DB = 'mydb';

// Step 1: Get secret from Vault
axios.get(`${VAULT_ADDR}/v1/${SECRET_PATH}`, {
  headers: { 'X-Vault-Token': VAULT_TOKEN }
})
.then(response => {
  const { username, password } = response.data.data.data;

  // Step 2: Connect to Postgres using credentials
  const client = new Client({
    user: username,
    password: password,
    host: POSTGRES_HOST,
    database: POSTGRES_DB,
    port: 5432,
  });

  client.connect()
    .then(() => {
      console.log('✅ Connected to Postgres using Vault credentials');
      return client.end();
    })
    .catch(err => {
      console.error('❌ DB connection error:', err.message);
    });

})
.catch(err => {
  console.error('❌ Vault fetch error:', err.message);
});

Dockerfile

FROM node:20

WORKDIR /app
COPY package*.json ./
RUN npm install
COPY app.js .

CMD [ "node", "app.js" ]


alternative:

// vault-get.js
const VAULT_ADDR = 'http://hcv:8200'; // Replace with your container Vault address
const SECRET_PATH = '/v1/secret/data/myapp'; // Replace with your actual path
const VAULT_TOKEN = 'hvs.xxxxx'; // Replace with your actual Vault token

async function fetchSecret() {
  try {
    const response = await fetch(`${VAULT_ADDR}${SECRET_PATH}`, {
      method: 'GET',
      headers: {
        'X-Vault-Token': VAULT_TOKEN
      }
    });

    if (!response.ok) {
      throw new Error(`Vault fetch error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    console.log('Secret data:', data);
  } catch (err) {
    console.error(err.message);
  }
}

fetchSecret();
----------------------------------------------------------------------
// app.js
import fetch from 'node-fetch';
import pg from 'pg';

const VAULT_ADDR = 'http://hcv:8200'; // Use the container name of Vault
const VAULT_TOKEN = process.env.VAULT_TOKEN; // Pass via environment variable
const VAULT_SECRET_PATH = '/v1/secret/data/database/postgres';

async function fetchDbCredentials() {
  const res = await fetch(`${VAULT_ADDR}${VAULT_SECRET_PATH}`, {
    headers: {
      'X-Vault-Token': VAULT_TOKEN
    }
  });

  if (!res.ok) {
    throw new Error(`Vault fetch failed: ${res.status}`);
  }

  const secret = await res.json();
  return secret.data.data;
}

async function connectToPostgres({ username, password }) {
  const client = new pg.Client({
    user: username,
    password: password,
    host: 'postgres',  // container name of your PostgreSQL instance
    database: 'postgres',
    port: 5432
  });

  await client.connect();
  const result = await client.query('SELECT NOW()');
  console.log('PostgreSQL time:', result.rows[0]);
  await client.end();
}

(async () => {
  try {
    const creds = await fetchDbCredentials();
    await connectToPostgres(creds);
  } catch (err) {
    console.error('Error:', err.message);
  }
})();

# package.json

{
  "name": "vault-postgres-app",
  "version": "1.0.0",
  "type": "module",
  "main": "app.js",
  "dependencies": {
    "pg": "^8.11.3",
    "node-fetch": "^3.3.2"
  }
}

# Dockerfile
FROM node:20

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY app.js ./

CMD ["node", "app.js"]
-------------------------------------------------------
// app.js
const VAULT_ADDR = 'http://hcv:8200'; // Vault container hostname (in net1)
const VAULT_SECRET_PATH = '/v1/secret/data/database/postgres'; // KV v2 path
const VAULT_TOKEN = process.env.VAULT_TOKEN; // Vault token from env

async function fetchSecret() {
  try {
    const response = await fetch(`${VAULT_ADDR}${VAULT_SECRET_PATH}`, {
      method: 'GET',
      headers: {
        'X-Vault-Token': VAULT_TOKEN
      }
    });

    if (!response.ok) {
      throw new Error(`Vault fetch failed: ${response.status} ${response.statusText}`);
    }

    const json = await response.json();
    const data = json.data.data;

    console.log('📦 Fetched secret from Vault:');
    console.log('Username:', data.username);
    console.log('Password:', data.password);

  } catch (error) {
    console.error('❌ Error fetching secret from Vault:', error.message);
  }
}

fetchSecret();

----------------------------------------------------------
Dockerfile
----------

FROM cache.artifactory.global.standardchartered.com/gv-images-products/scb-bases/gts-1114/node-builder:20.19.1-micro-6314908 as builder
COPY --chown=$USER package.json /opt/app/application/
WORKDIR /opt/app/application
RUN npm install
RUN ls -1

FROM artifactory.global.standardchartered.com/gv-images-products/scb-bases/gts-1114/node:20.19.1-micro-6679849
# copy installed dependencies from the previous image
COPY --from=builder --chown=$USER /opt/app/application/node_modules /opt/app/application/node_modules
# copy in your script(s)
COPY --chown=$USER app.js /opt/app/application/

EXPOSE 3000
# by default in base image, container starts with "node server.js", replace "server.js" with your file name
RUN sed -i 's\server.js\app.js\g' /opt/app/run.sh
CMD ["node", "app.js"]

Package.json
------------

{
  "name": "vault-postgres-app",
  "version": "1.0.0",
  "type": "module",
  "main": "app.js",
  "dependencies": {
    "pg": "^8.11.3",
    "node-fetch": "^3.3.2"
  }
}


app.js
------
import axios from 'axios';
import pg from 'pg';
const { client } = pg;
// const axios = require('axios');
// const { Client } = require('pg');

// Vault & Postgres config
const VAULT_ADDR = process.env.VAULT_ADDR;  // replace with VM IP
const VAULT_TOKEN = process.env.VAULT_TOKEN  // Replace with real token
const SECRET_PATH = 'secret/data/database/postgres'; // Replace with right path where your secrets are saved // KV2 automatically adds data after secret
const POSTGRES_HOST = 'postgres-db';
const POSTGRES_DB = 'mydb';

//const secretPath = 'secret/data/database/postgres';
console.log("vault request URL =", '${process.env.VAULT_ADDR}/v1/${SECRET_PATH}');
// console.log('Fetching from Vault:', '${VAULT_ADDR}/v1/${SECRET_PATH}');

// Step 1: Get secret from Vault
axios.get(`${VAULT_ADDR}/v1/${SECRET_PATH}`, {
  headers: { 'X-Vault-Token': VAULT_TOKEN }
})
.then(response => {
  const { username, password } = response.data.data.data;

  // Step 2: Connect to Postgres using credentials
  const client = new Client({
    user: username,
    password: password,
    host: POSTGRES_HOST,
    database: POSTGRES_DB,
    port: 5432,
  });

  client.connect()
    .then(() => {
      console.log('✅ Connected to Postgres using Vault credentials');
      return client.end();
    })
    .catch(err => {
      console.error('❌ DB connection error:', err.message);
    });

})
emerg1@uklvadsb0291[DEV][~] $ sudo podman logs node-app
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   219    0   219    0     0   2517      0 --:--:-- --:--:-- --:--:--  2517
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1120    0  1120    0     0   9491      0 --:--:-- --:--:-- --:--:--  9491
Getting latest cert bundle: /com/scb/pki/icabundle/internalcacertsbundleall.002.crt
Fetching certs from https://artifactory.global.standardchartered.com/artifactory/generic-production//com/scb/pki/icabundle/internalcacertsbundleall.002.crt if SCBINTERNALCACERT_URL not specified
SCBINTERNALCACERT URL was not provided/empty, defaulting to fetch certs from original URL
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0200
Replacing current certs with new certs
100 74248  100 74248    0     0   609k      0 --:--:-- --:--:-- --:--:--  604k
❌ Vault fetch error: Request failed with status code 403

CONTAINER ID  IMAGE                                                            COMMAND          CREATED         STATUS                   PORTS                   NAMES
7229313002cf  artifactory.global.standardchartered.com/hashicorp/vault:latest  server -dev      41 hours ago    Up 41 hours              0.0.0.0:8200->8200/tcp  hcv
d730008d0082  artifactory.global.standardchartered.com/postgres:12             postgres         41 hours ago    Up 41 hours              0.0.0.0:5432->5432/tcp  postgres-db
faeaf08bf99c  localhost/node-vault-app:latest                                  /opt/app/run.sh  40 hours ago    Exited (0) 40 hours ago  0.0.0.0:3000->3000/tcp  node-app
4ba3a0ff3b93  artifactory.global.standardchartered.com/ubuntu:latest           bash             20 minutes ago  Up 20 minutes                                    ubuntu



node:internal/modules/cjs/loader:1215
  throw err;
  ^

Error: Cannot find module '/defaultuser/app.js'
    at Module._resolveFilename (node:internal/modules/cjs/loader:1212:15)
    at Module._load (node:internal/modules/cjs/loader:1043:27)
    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:164:12)
    at node:internal/main/run_main_module:28:49 {
  code: 'MODULE_NOT_FOUND',
  requireStack: []
}


{
  "name": "nn",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.21.0"
    "pg": "^8.11.3",
    "node-fetch": "^3.3.2"
  }
}

emerg1@uklvadsb0291[DEV][~] $ sudo podman logs node-app
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   219    0   219    0     0   2281      0 --:--:-- --:--:-- --:--:--  2281
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1120    0  1120    0     0  11089      0 --:--:-- --:--:-- --:--:-- 11089
Getting latest cert bundle: /com/scb/pki/icabundle/internalcacertsbundleall.002.crt
Fetching certs from https://artifactory.global.standardchartered.com/artifactory/generic-production//com/scb/pki/icabundle/internalcacertsbundleall.002.crt if SCBINTERNALCACERT_URL not specified
SCBINTERNALCACERT URL was not provided/empty, defaulting to fetch certs from original URL
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0200
Replacing current certs with new certs
100 74248  100 74248    0     0   589k      0 --:--:-- --:--:-- --:--:--  589k
node:internal/modules/esm/resolve:873
  throw new ERR_MODULE_NOT_FOUND(packageName, fileURLToPath(base), null);
        ^

Error [ERR_MODULE_NOT_FOUND]: Cannot find package 'axios' imported from /opt/app/application/app.js
    at packageResolve (node:internal/modules/esm/resolve:873:9)
    at moduleResolve (node:internal/modules/esm/resolve:946:18)
    at defaultResolve (node:internal/modules/esm/resolve:1188:11)
    at ModuleLoader.defaultResolve (node:internal/modules/esm/loader:642:12)
    at #cachedDefaultResolve (node:internal/modules/esm/loader:591:25)
    at ModuleLoader.resolve (node:internal/modules/esm/loader:574:38)
    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:236:38)
    at ModuleJob._link (node:internal/modules/esm/module_job:130:49) {
  code: 'ERR_MODULE_NOT_FOUND'
}

Node.js v20.19.2

app.js
------
import axios from 'axios';
import pg from 'pg';
const { client } = pg;
const express=require('express');
const app=express();
const VAULT_ADDR = process.env.VAULT_ADDR;  // replace with VM IP
const VAULT_TOKEN = process.env.VAULT_TOKEN  // Replace with real token
const SECRET_PATH = 'secret/data/database/postgres'; // Replace with right path where your secrets are saved // KV2 automatically adds data after secret
const POSTGRES_HOST = 'postgres-db';
const POSTGRES_DB = 'mydb';

const port=8200;

app.get('/user/:username',(req,res) => {
  const username = req.params.username;
  const response = {
      message: `Hello, ${username}!`,
      username: username
    };
  res.json(response);
});

// Step 1: Get secret from Vault
axios.get(`${VAULT_ADDR}/v1/${SECRET_PATH}`, {
  headers: { 'X-Vault-Token': VAULT_TOKEN }
})
.then(response => {
  const { username, password } = response.data.data.data;

  // Step 2: Connect to Postgres using credentials
  const client = new Client({
    user: username,
    password: password,
    host: POSTGRES_HOST,
    database: POSTGRES_DB,
    port: 5432,
  });

  client.connect()
    .then(() => {
      console.log('Connected to Postgres using Vault credentials');
      return client.end();
    })
    .catch(err => {
      console.error('DB connection error:', err.message);
    });
})

.catch(err => {
  if (err.response) {
  console.error('Vault fetch error:, $(err.response.status} - ${JSON.stringify(err.response.data)}');
  } else {
  console.error('Error connecting to vault: $(err.message}');
  }
});

app.listen(port,() => {
    console.log(`server running at http://localhost:${port}`);
    console.log(`vault request URL = ${VAULT_ADDR}/v1/${SECRET_PATH}`);
    console.log(`VAULT_ADDR = ${VAULT_ADDR}`);
    console.log(`VAULT_TOKEN = ${VAULT_TOKEN}`);
});


  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   219    0   219    0     0   2281      0 --:--:-- --:--:-- --:--:--  2281
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  1120    0  1120    0     0  12043      0 --:--:-- --:--:-- --:--:-- 12043
Getting latest cert bundle: /com/scb/pki/icabundle/internalcacertsbundleall.002.crt
Fetching certs from https://artifactory.global.standardchartered.com/artifactory/generic-production//com/scb/pki/icabundle/internalcacertsbundleall.002.crt if SCBINTERNALCACERT_URL not specified
SCBINTERNALCACERT URL was not provided/empty, defaulting to fetch certs from original URL
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0200
Replacing current certs with new certs
100 74248  100 74248    0     0   533k      0 --:--:-- --:--:-- --:--:--  533k
file:///opt/app/application/app.js:4
const express=require('express');
              ^

ReferenceError: require is not defined in ES module scope, you can use import instead
    at file:///opt/app/application/app.js:4:15
    at ModuleJob.run (node:internal/modules/esm/module_job:263:25)
    at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v20.19.2

{
  "name": "nn",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.6.8",
    "express": "^4.21.0",
    "pg": "^8.11.3",
    "node-fetch": "^3.3.2"
  }
}

FROM cache.artifactory.global.standardchartered.com/gv-images-products/scb-bases/gts-1114/node-builder:20.19.1-micro-6314908 as builder
COPY --chown=$USER package.json /opt/app/application/
WORKDIR /opt/app/application
RUN npm install
RUN ls -1

FROM artifactory.global.standardchartered.com/gv-images-products/scb-bases/gts-1114/node:20.19.1-micro-6679849
# copy installed dependencies from the previous image
COPY --from=builder --chown=$USER /opt/app/application/node_modules /opt/app/application/node_modules
# copy in your script(s)
COPY --chown=$USER app.js /opt/app/application/

EXPOSE 3000
# by default in base image, container starts with "node server.js", replace "server.js" with your file name
RUN sed -i 's\server.js\app.js\g' /opt/app/run.sh

